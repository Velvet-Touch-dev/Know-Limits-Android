rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User documents
    match /users/{userId} {
      // Allow a user to read (get/list for self), create their own document.
      allow list, create: if request.auth != null && request.auth.uid == userId;

      // Allow any authenticated user to get any user document.
      allow get: if request.auth != null;

      // Update rules for user documents
      allow update: if request.auth != null && (
                      // Case A: User is updating their OWN document.
                      // This covers self-updates during pairing, unpairing, FCM token, role changes, etc.
                      (request.auth.uid == userId) ||

                      // Case B: Sub (request.auth.uid) completing pairing with Dom (userId).
                      // Sub updates Dom's document.
                      (
                        userId != request.auth.uid && // Document owner (Dom) is not the requester (Sub)
                        request.resource.data.role == "Dom" && // Dom's role is being set/confirmed
                        request.resource.data.pairedWith == request.auth.uid && // Dom's pairedWith is being set to Sub's UID
                        request.resource.data.pairingCode == null &&
                        request.resource.data.pairingCodeTimestamp == null &&
                        // Sub is allowed to change these specific fields on Dom's document:
                        request.resource.data.diff(resource.data).affectedKeys().hasAny([
                          'pairedWith', 'role', 'pairingCode', 'pairingCodeTimestamp'
                        ]) &&
                        request.resource.data.diff(resource.data).affectedKeys().size() <= 4 // Max 4 fields
                      ) ||

                      // Case C: User (request.auth.uid) unpairing from Partner (userId).
                      // User updates Partner's document.
                      (
                        userId != request.auth.uid && // Document owner (Partner) is not the requester
                        resource.data.pairedWith == request.auth.uid && // Partner's doc currently IS paired with the requester
                        // Requester is setting Partner's fields to null:
                        request.resource.data.pairedWith == null &&
                        request.resource.data.role == null &&
                        request.resource.data.pairingCode == null &&
                        request.resource.data.pairingCodeTimestamp == null &&
                        // User is allowed to change these specific fields on Partner's document:
                        request.resource.data.diff(resource.data).affectedKeys().hasAny([
                          'pairedWith', 'role', 'pairingCode', 'pairingCodeTimestamp'
                        ]) &&
                        request.resource.data.diff(resource.data).affectedKeys().size() <= 4 // Max 4 fields
                      )
                    );
    }

    // Rule for querying the 'users' collection by 'pairingCode'.
    match /users/{document=**} {
      allow list: if request.auth != null &&
                     request.query.limit == 1;
    }

    // Scenes
    match /scenes/{sceneId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Positions
    match /positions/{positionId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Favorites
    match /favorites/{favoriteId} {
      allow read, delete: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.user_id == request.auth.uid;
    }

    // Shared Task Lists
    match /shared_task_lists/{pairingId}/tasks/{taskId} {
      allow get, list: if request.auth != null && request.auth.uid in pairingId.split('_');
      allow create: if request.auth != null &&
                       request.auth.uid in pairingId.split('_') &&
                       request.resource.data.createdByUid == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in pairingId.split('_');
      allow delete: if request.auth != null && request.auth.uid in pairingId.split('_');
    }
  }
}
