// Generated by view binder compiler. Do not edit!
package com.velvettouch.nosafeword.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.navigation.NavigationView;
import com.velvettouch.nosafeword.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBodyWorshipBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView;

  @NonNull
  public final MaterialButton autoPlayButton;

  @NonNull
  public final LinearLayout autoPlaySettings;

  @NonNull
  public final CardView bodyWorshipCardView;

  @NonNull
  public final TextView bodyWorshipTextView;

  @NonNull
  public final LinearLayout buttonsContainer;

  @NonNull
  public final LinearLayout controlsContainer;

  @NonNull
  public final DrawerLayout drawerLayout;

  @NonNull
  public final Spinner maxTimeSpinner;

  @NonNull
  public final Spinner minTimeSpinner;

  @NonNull
  public final NavigationView navView;

  @NonNull
  public final MaterialButton randomizeButton;

  @NonNull
  public final TextView timerTextView;

  @NonNull
  public final Toolbar toolbar;

  private ActivityBodyWorshipBinding(@NonNull DrawerLayout rootView,
      @NonNull MaterialButton autoPlayButton, @NonNull LinearLayout autoPlaySettings,
      @NonNull CardView bodyWorshipCardView, @NonNull TextView bodyWorshipTextView,
      @NonNull LinearLayout buttonsContainer, @NonNull LinearLayout controlsContainer,
      @NonNull DrawerLayout drawerLayout, @NonNull Spinner maxTimeSpinner,
      @NonNull Spinner minTimeSpinner, @NonNull NavigationView navView,
      @NonNull MaterialButton randomizeButton, @NonNull TextView timerTextView,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.autoPlayButton = autoPlayButton;
    this.autoPlaySettings = autoPlaySettings;
    this.bodyWorshipCardView = bodyWorshipCardView;
    this.bodyWorshipTextView = bodyWorshipTextView;
    this.buttonsContainer = buttonsContainer;
    this.controlsContainer = controlsContainer;
    this.drawerLayout = drawerLayout;
    this.maxTimeSpinner = maxTimeSpinner;
    this.minTimeSpinner = minTimeSpinner;
    this.navView = navView;
    this.randomizeButton = randomizeButton;
    this.timerTextView = timerTextView;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBodyWorshipBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBodyWorshipBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_body_worship, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBodyWorshipBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.auto_play_button;
      MaterialButton autoPlayButton = ViewBindings.findChildViewById(rootView, id);
      if (autoPlayButton == null) {
        break missingId;
      }

      id = R.id.auto_play_settings;
      LinearLayout autoPlaySettings = ViewBindings.findChildViewById(rootView, id);
      if (autoPlaySettings == null) {
        break missingId;
      }

      id = R.id.body_worship_card_view;
      CardView bodyWorshipCardView = ViewBindings.findChildViewById(rootView, id);
      if (bodyWorshipCardView == null) {
        break missingId;
      }

      id = R.id.body_worship_text_view;
      TextView bodyWorshipTextView = ViewBindings.findChildViewById(rootView, id);
      if (bodyWorshipTextView == null) {
        break missingId;
      }

      id = R.id.buttons_container;
      LinearLayout buttonsContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonsContainer == null) {
        break missingId;
      }

      id = R.id.controls_container;
      LinearLayout controlsContainer = ViewBindings.findChildViewById(rootView, id);
      if (controlsContainer == null) {
        break missingId;
      }

      DrawerLayout drawerLayout = (DrawerLayout) rootView;

      id = R.id.max_time_spinner;
      Spinner maxTimeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (maxTimeSpinner == null) {
        break missingId;
      }

      id = R.id.min_time_spinner;
      Spinner minTimeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (minTimeSpinner == null) {
        break missingId;
      }

      id = R.id.nav_view;
      NavigationView navView = ViewBindings.findChildViewById(rootView, id);
      if (navView == null) {
        break missingId;
      }

      id = R.id.randomize_button;
      MaterialButton randomizeButton = ViewBindings.findChildViewById(rootView, id);
      if (randomizeButton == null) {
        break missingId;
      }

      id = R.id.timer_text_view;
      TextView timerTextView = ViewBindings.findChildViewById(rootView, id);
      if (timerTextView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityBodyWorshipBinding((DrawerLayout) rootView, autoPlayButton,
          autoPlaySettings, bodyWorshipCardView, bodyWorshipTextView, buttonsContainer,
          controlsContainer, drawerLayout, maxTimeSpinner, minTimeSpinner, navView, randomizeButton,
          timerTextView, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
