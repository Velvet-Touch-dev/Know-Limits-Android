// Generated by view binder compiler. Do not edit!
package com.velvettouch.nosafeword.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.tabs.TabLayout;
import com.velvettouch.nosafeword.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPositionsBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final MaterialButton autoPlayButton;

  @NonNull
  public final LinearLayout autoPlaySettings;

  @NonNull
  public final ExtendedFloatingActionButton buttonResetToDefault;

  @NonNull
  public final LinearLayout buttonsContainer;

  @NonNull
  public final Chip chipAllPositions;

  @NonNull
  public final Chip chipCustomPositions;

  @NonNull
  public final LinearLayout controlsContainer;

  @NonNull
  public final DrawerLayout drawerLayout;

  @NonNull
  public final FloatingActionButton fabAddPosition;

  @NonNull
  public final LinearLayout libraryFabContainer;

  @NonNull
  public final RelativeLayout libraryTabContent;

  @NonNull
  public final Spinner maxTimeSpinner;

  @NonNull
  public final Spinner minTimeSpinner;

  @NonNull
  public final NavigationView navView;

  @NonNull
  public final CardView positionCardView;

  @NonNull
  public final ChipGroup positionFilterChipGroup;

  @NonNull
  public final ImageView positionImageView;

  @NonNull
  public final TextView positionNameTextView;

  @NonNull
  public final SearchView positionSearchView;

  @NonNull
  public final FrameLayout positionsContentContainer;

  @NonNull
  public final RecyclerView positionsLibraryRecyclerView;

  @NonNull
  public final TabLayout positionsTabs;

  @NonNull
  public final MaterialButton previousButton;

  @NonNull
  public final MaterialButton randomizeButton;

  @NonNull
  public final ConstraintLayout randomizeTabContent;

  @NonNull
  public final TextView timerTextView;

  @NonNull
  public final Toolbar toolbar;

  private ActivityPositionsBinding(@NonNull DrawerLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull MaterialButton autoPlayButton,
      @NonNull LinearLayout autoPlaySettings,
      @NonNull ExtendedFloatingActionButton buttonResetToDefault,
      @NonNull LinearLayout buttonsContainer, @NonNull Chip chipAllPositions,
      @NonNull Chip chipCustomPositions, @NonNull LinearLayout controlsContainer,
      @NonNull DrawerLayout drawerLayout, @NonNull FloatingActionButton fabAddPosition,
      @NonNull LinearLayout libraryFabContainer, @NonNull RelativeLayout libraryTabContent,
      @NonNull Spinner maxTimeSpinner, @NonNull Spinner minTimeSpinner,
      @NonNull NavigationView navView, @NonNull CardView positionCardView,
      @NonNull ChipGroup positionFilterChipGroup, @NonNull ImageView positionImageView,
      @NonNull TextView positionNameTextView, @NonNull SearchView positionSearchView,
      @NonNull FrameLayout positionsContentContainer,
      @NonNull RecyclerView positionsLibraryRecyclerView, @NonNull TabLayout positionsTabs,
      @NonNull MaterialButton previousButton, @NonNull MaterialButton randomizeButton,
      @NonNull ConstraintLayout randomizeTabContent, @NonNull TextView timerTextView,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.autoPlayButton = autoPlayButton;
    this.autoPlaySettings = autoPlaySettings;
    this.buttonResetToDefault = buttonResetToDefault;
    this.buttonsContainer = buttonsContainer;
    this.chipAllPositions = chipAllPositions;
    this.chipCustomPositions = chipCustomPositions;
    this.controlsContainer = controlsContainer;
    this.drawerLayout = drawerLayout;
    this.fabAddPosition = fabAddPosition;
    this.libraryFabContainer = libraryFabContainer;
    this.libraryTabContent = libraryTabContent;
    this.maxTimeSpinner = maxTimeSpinner;
    this.minTimeSpinner = minTimeSpinner;
    this.navView = navView;
    this.positionCardView = positionCardView;
    this.positionFilterChipGroup = positionFilterChipGroup;
    this.positionImageView = positionImageView;
    this.positionNameTextView = positionNameTextView;
    this.positionSearchView = positionSearchView;
    this.positionsContentContainer = positionsContentContainer;
    this.positionsLibraryRecyclerView = positionsLibraryRecyclerView;
    this.positionsTabs = positionsTabs;
    this.previousButton = previousButton;
    this.randomizeButton = randomizeButton;
    this.randomizeTabContent = randomizeTabContent;
    this.timerTextView = timerTextView;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPositionsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPositionsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_positions, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPositionsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.auto_play_button;
      MaterialButton autoPlayButton = ViewBindings.findChildViewById(rootView, id);
      if (autoPlayButton == null) {
        break missingId;
      }

      id = R.id.auto_play_settings;
      LinearLayout autoPlaySettings = ViewBindings.findChildViewById(rootView, id);
      if (autoPlaySettings == null) {
        break missingId;
      }

      id = R.id.button_reset_to_default;
      ExtendedFloatingActionButton buttonResetToDefault = ViewBindings.findChildViewById(rootView, id);
      if (buttonResetToDefault == null) {
        break missingId;
      }

      id = R.id.buttons_container;
      LinearLayout buttonsContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonsContainer == null) {
        break missingId;
      }

      id = R.id.chip_all_positions;
      Chip chipAllPositions = ViewBindings.findChildViewById(rootView, id);
      if (chipAllPositions == null) {
        break missingId;
      }

      id = R.id.chip_custom_positions;
      Chip chipCustomPositions = ViewBindings.findChildViewById(rootView, id);
      if (chipCustomPositions == null) {
        break missingId;
      }

      id = R.id.controls_container;
      LinearLayout controlsContainer = ViewBindings.findChildViewById(rootView, id);
      if (controlsContainer == null) {
        break missingId;
      }

      DrawerLayout drawerLayout = (DrawerLayout) rootView;

      id = R.id.fab_add_position;
      FloatingActionButton fabAddPosition = ViewBindings.findChildViewById(rootView, id);
      if (fabAddPosition == null) {
        break missingId;
      }

      id = R.id.library_fab_container;
      LinearLayout libraryFabContainer = ViewBindings.findChildViewById(rootView, id);
      if (libraryFabContainer == null) {
        break missingId;
      }

      id = R.id.library_tab_content;
      RelativeLayout libraryTabContent = ViewBindings.findChildViewById(rootView, id);
      if (libraryTabContent == null) {
        break missingId;
      }

      id = R.id.max_time_spinner;
      Spinner maxTimeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (maxTimeSpinner == null) {
        break missingId;
      }

      id = R.id.min_time_spinner;
      Spinner minTimeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (minTimeSpinner == null) {
        break missingId;
      }

      id = R.id.nav_view;
      NavigationView navView = ViewBindings.findChildViewById(rootView, id);
      if (navView == null) {
        break missingId;
      }

      id = R.id.position_card_view;
      CardView positionCardView = ViewBindings.findChildViewById(rootView, id);
      if (positionCardView == null) {
        break missingId;
      }

      id = R.id.position_filter_chip_group;
      ChipGroup positionFilterChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (positionFilterChipGroup == null) {
        break missingId;
      }

      id = R.id.position_image_view;
      ImageView positionImageView = ViewBindings.findChildViewById(rootView, id);
      if (positionImageView == null) {
        break missingId;
      }

      id = R.id.position_name_text_view;
      TextView positionNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (positionNameTextView == null) {
        break missingId;
      }

      id = R.id.position_search_view;
      SearchView positionSearchView = ViewBindings.findChildViewById(rootView, id);
      if (positionSearchView == null) {
        break missingId;
      }

      id = R.id.positions_content_container;
      FrameLayout positionsContentContainer = ViewBindings.findChildViewById(rootView, id);
      if (positionsContentContainer == null) {
        break missingId;
      }

      id = R.id.positions_library_recycler_view;
      RecyclerView positionsLibraryRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (positionsLibraryRecyclerView == null) {
        break missingId;
      }

      id = R.id.positions_tabs;
      TabLayout positionsTabs = ViewBindings.findChildViewById(rootView, id);
      if (positionsTabs == null) {
        break missingId;
      }

      id = R.id.previous_button;
      MaterialButton previousButton = ViewBindings.findChildViewById(rootView, id);
      if (previousButton == null) {
        break missingId;
      }

      id = R.id.randomize_button;
      MaterialButton randomizeButton = ViewBindings.findChildViewById(rootView, id);
      if (randomizeButton == null) {
        break missingId;
      }

      id = R.id.randomize_tab_content;
      ConstraintLayout randomizeTabContent = ViewBindings.findChildViewById(rootView, id);
      if (randomizeTabContent == null) {
        break missingId;
      }

      id = R.id.timer_text_view;
      TextView timerTextView = ViewBindings.findChildViewById(rootView, id);
      if (timerTextView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityPositionsBinding((DrawerLayout) rootView, appBarLayout, autoPlayButton,
          autoPlaySettings, buttonResetToDefault, buttonsContainer, chipAllPositions,
          chipCustomPositions, controlsContainer, drawerLayout, fabAddPosition, libraryFabContainer,
          libraryTabContent, maxTimeSpinner, minTimeSpinner, navView, positionCardView,
          positionFilterChipGroup, positionImageView, positionNameTextView, positionSearchView,
          positionsContentContainer, positionsLibraryRecyclerView, positionsTabs, previousButton,
          randomizeButton, randomizeTabContent, timerTextView, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
