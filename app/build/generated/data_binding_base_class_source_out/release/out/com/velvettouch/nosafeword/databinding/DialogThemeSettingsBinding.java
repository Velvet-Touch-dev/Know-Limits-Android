// Generated by view binder compiler. Do not edit!
package com.velvettouch.nosafeword.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.velvettouch.nosafeword.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogThemeSettingsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RadioButton colorDefaultRadio;

  @NonNull
  public final RadioButton colorJustBlackRadio;

  @NonNull
  public final MaterialCardView colorOptionsCard;

  @NonNull
  public final TextView colorPaletteTitle;

  @NonNull
  public final RadioButton colorPitchBlackRadio;

  @NonNull
  public final RadioButton colorPurpleRadio;

  @NonNull
  public final RadioGroup colorRadioGroup;

  @NonNull
  public final View justBlackDivider;

  @NonNull
  public final View pitchBlackDivider;

  @NonNull
  public final RadioButton themeDarkRadio;

  @NonNull
  public final RadioButton themeLightRadio;

  @NonNull
  public final TextView themeModeTitle;

  @NonNull
  public final MaterialCardView themeOptionsCard;

  @NonNull
  public final RadioGroup themeRadioGroup;

  @NonNull
  public final RadioButton themeSystemRadio;

  private DialogThemeSettingsBinding(@NonNull ConstraintLayout rootView,
      @NonNull RadioButton colorDefaultRadio, @NonNull RadioButton colorJustBlackRadio,
      @NonNull MaterialCardView colorOptionsCard, @NonNull TextView colorPaletteTitle,
      @NonNull RadioButton colorPitchBlackRadio, @NonNull RadioButton colorPurpleRadio,
      @NonNull RadioGroup colorRadioGroup, @NonNull View justBlackDivider,
      @NonNull View pitchBlackDivider, @NonNull RadioButton themeDarkRadio,
      @NonNull RadioButton themeLightRadio, @NonNull TextView themeModeTitle,
      @NonNull MaterialCardView themeOptionsCard, @NonNull RadioGroup themeRadioGroup,
      @NonNull RadioButton themeSystemRadio) {
    this.rootView = rootView;
    this.colorDefaultRadio = colorDefaultRadio;
    this.colorJustBlackRadio = colorJustBlackRadio;
    this.colorOptionsCard = colorOptionsCard;
    this.colorPaletteTitle = colorPaletteTitle;
    this.colorPitchBlackRadio = colorPitchBlackRadio;
    this.colorPurpleRadio = colorPurpleRadio;
    this.colorRadioGroup = colorRadioGroup;
    this.justBlackDivider = justBlackDivider;
    this.pitchBlackDivider = pitchBlackDivider;
    this.themeDarkRadio = themeDarkRadio;
    this.themeLightRadio = themeLightRadio;
    this.themeModeTitle = themeModeTitle;
    this.themeOptionsCard = themeOptionsCard;
    this.themeRadioGroup = themeRadioGroup;
    this.themeSystemRadio = themeSystemRadio;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogThemeSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogThemeSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_theme_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogThemeSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.color_default_radio;
      RadioButton colorDefaultRadio = ViewBindings.findChildViewById(rootView, id);
      if (colorDefaultRadio == null) {
        break missingId;
      }

      id = R.id.color_just_black_radio;
      RadioButton colorJustBlackRadio = ViewBindings.findChildViewById(rootView, id);
      if (colorJustBlackRadio == null) {
        break missingId;
      }

      id = R.id.color_options_card;
      MaterialCardView colorOptionsCard = ViewBindings.findChildViewById(rootView, id);
      if (colorOptionsCard == null) {
        break missingId;
      }

      id = R.id.color_palette_title;
      TextView colorPaletteTitle = ViewBindings.findChildViewById(rootView, id);
      if (colorPaletteTitle == null) {
        break missingId;
      }

      id = R.id.color_pitch_black_radio;
      RadioButton colorPitchBlackRadio = ViewBindings.findChildViewById(rootView, id);
      if (colorPitchBlackRadio == null) {
        break missingId;
      }

      id = R.id.color_purple_radio;
      RadioButton colorPurpleRadio = ViewBindings.findChildViewById(rootView, id);
      if (colorPurpleRadio == null) {
        break missingId;
      }

      id = R.id.color_radio_group;
      RadioGroup colorRadioGroup = ViewBindings.findChildViewById(rootView, id);
      if (colorRadioGroup == null) {
        break missingId;
      }

      id = R.id.just_black_divider;
      View justBlackDivider = ViewBindings.findChildViewById(rootView, id);
      if (justBlackDivider == null) {
        break missingId;
      }

      id = R.id.pitch_black_divider;
      View pitchBlackDivider = ViewBindings.findChildViewById(rootView, id);
      if (pitchBlackDivider == null) {
        break missingId;
      }

      id = R.id.theme_dark_radio;
      RadioButton themeDarkRadio = ViewBindings.findChildViewById(rootView, id);
      if (themeDarkRadio == null) {
        break missingId;
      }

      id = R.id.theme_light_radio;
      RadioButton themeLightRadio = ViewBindings.findChildViewById(rootView, id);
      if (themeLightRadio == null) {
        break missingId;
      }

      id = R.id.theme_mode_title;
      TextView themeModeTitle = ViewBindings.findChildViewById(rootView, id);
      if (themeModeTitle == null) {
        break missingId;
      }

      id = R.id.theme_options_card;
      MaterialCardView themeOptionsCard = ViewBindings.findChildViewById(rootView, id);
      if (themeOptionsCard == null) {
        break missingId;
      }

      id = R.id.theme_radio_group;
      RadioGroup themeRadioGroup = ViewBindings.findChildViewById(rootView, id);
      if (themeRadioGroup == null) {
        break missingId;
      }

      id = R.id.theme_system_radio;
      RadioButton themeSystemRadio = ViewBindings.findChildViewById(rootView, id);
      if (themeSystemRadio == null) {
        break missingId;
      }

      return new DialogThemeSettingsBinding((ConstraintLayout) rootView, colorDefaultRadio,
          colorJustBlackRadio, colorOptionsCard, colorPaletteTitle, colorPitchBlackRadio,
          colorPurpleRadio, colorRadioGroup, justBlackDivider, pitchBlackDivider, themeDarkRadio,
          themeLightRadio, themeModeTitle, themeOptionsCard, themeRadioGroup, themeSystemRadio);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
