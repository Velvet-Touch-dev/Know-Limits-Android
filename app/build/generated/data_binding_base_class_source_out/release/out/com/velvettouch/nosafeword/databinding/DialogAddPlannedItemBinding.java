// Generated by view binder compiler. Do not edit!
package com.velvettouch.nosafeword.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.tabs.TabLayout;
import com.velvettouch.nosafeword.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAddPlannedItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton buttonAddSelectedItem;

  @NonNull
  public final MaterialButton buttonCancelAddItem;

  @NonNull
  public final TextView dialogTitle;

  @NonNull
  public final RecyclerView recyclerViewSearchResults;

  @NonNull
  public final SearchView searchViewPlannedItem;

  @NonNull
  public final TabLayout tabLayoutItemType;

  private DialogAddPlannedItemBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton buttonAddSelectedItem, @NonNull MaterialButton buttonCancelAddItem,
      @NonNull TextView dialogTitle, @NonNull RecyclerView recyclerViewSearchResults,
      @NonNull SearchView searchViewPlannedItem, @NonNull TabLayout tabLayoutItemType) {
    this.rootView = rootView;
    this.buttonAddSelectedItem = buttonAddSelectedItem;
    this.buttonCancelAddItem = buttonCancelAddItem;
    this.dialogTitle = dialogTitle;
    this.recyclerViewSearchResults = recyclerViewSearchResults;
    this.searchViewPlannedItem = searchViewPlannedItem;
    this.tabLayoutItemType = tabLayoutItemType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAddPlannedItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAddPlannedItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_add_planned_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAddPlannedItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_add_selected_item;
      MaterialButton buttonAddSelectedItem = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddSelectedItem == null) {
        break missingId;
      }

      id = R.id.button_cancel_add_item;
      MaterialButton buttonCancelAddItem = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancelAddItem == null) {
        break missingId;
      }

      id = R.id.dialog_title;
      TextView dialogTitle = ViewBindings.findChildViewById(rootView, id);
      if (dialogTitle == null) {
        break missingId;
      }

      id = R.id.recycler_view_search_results;
      RecyclerView recyclerViewSearchResults = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewSearchResults == null) {
        break missingId;
      }

      id = R.id.search_view_planned_item;
      SearchView searchViewPlannedItem = ViewBindings.findChildViewById(rootView, id);
      if (searchViewPlannedItem == null) {
        break missingId;
      }

      id = R.id.tab_layout_item_type;
      TabLayout tabLayoutItemType = ViewBindings.findChildViewById(rootView, id);
      if (tabLayoutItemType == null) {
        break missingId;
      }

      return new DialogAddPlannedItemBinding((LinearLayout) rootView, buttonAddSelectedItem,
          buttonCancelAddItem, dialogTitle, recyclerViewSearchResults, searchViewPlannedItem,
          tabLayoutItemType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
